{% extends 'base.html.twig' %}

{% block title %}{{ edition }} - Connexion{% endblock %}

{% block header_title %}{{ edition }}{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('connectionForm', () => ({
            pseudo: '',
            team: '',
            errors: {},
            isSubmitting: false,
            
            userId: '',
            
            init() {
                // Récupérer les données sauvegardées dans le localStorage
                const savedData = localStorage.getItem('eurovisionUser');
                if (savedData) {
                    const userData = JSON.parse(savedData);
                    this.pseudo = userData.pseudo || '';
                    this.team = userData.team || '';
                    this.userId = userData.userId || '';
                }
            },
            
            async submit() {
                this.errors = {};
                this.isSubmitting = true;
                
                try {
                    const response = await fetch('{{ path('api_validate_connection') }}', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            pseudo: this.pseudo,
                            team: this.team,
                            userId: this.userId
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (!response.ok) {
                        this.errors = data.errors || { general: 'Une erreur est survenue' };
                        return;
                    }
                    
                    // Sauvegarder dans localStorage avec l'ID utilisateur
                    const userToSave = {
                        pseudo: this.pseudo,
                        team: this.team
                    };
                    
                    // Ajouter l'ID utilisateur s'il est présent
                    if (data.userId) {
                        userToSave.userId = data.userId;
                    }
                    
                    localStorage.setItem('eurovisionUser', JSON.stringify(userToSave));
                    
                    // Redirection vers la page de vote
                    window.location.href = data.redirect;
                } catch (error) {
                    this.errors.general = 'Une erreur est survenue lors de la connexion';
                    console.error(error);
                } finally {
                    this.isSubmitting = false;
                }
            }
        }));
    });
</script>
{% endblock %}

{% block body %}
<div class="flex flex-col items-center justify-center my-8">
    <div class="text-center mb-4">
        <img src="{{ asset('images/logo.svg') }}" alt="Eurovision Vote" class="mx-auto h-24 w-auto mb-4">
        <h2 class="text-xl text-gray-600">
            Bienvenue ! Pour commencer, identifiez-vous
        </h2>
    </div>

    <div class="w-full max-w-md">
        <div class="bg-white py-8 px-4 shadow-lg rounded-lg sm:px-10 transform transition-all hover:shadow-xl" x-data="connectionForm">
            <div class="space-y-6">
                {% if errors is defined and errors %}
                    <div class="bg-red-50 border-l-4 border-red-400 p-4 rounded">
                        <p class="text-sm text-red-700">
                            {{ errors }}
                        </p>
                    </div>
                {% endif %}
                
                <div x-show="errors.general" x-cloak class="bg-red-50 border-l-4 border-red-400 p-4 rounded">
                    <p class="text-sm text-red-700" x-text="errors.general"></p>
                </div>

                <div>
                    <label for="pseudo" class="block text-sm font-medium text-gray-700">
                        Pseudo
                    </label>
                    <div class="mt-1">
                        <input id="pseudo" name="pseudo" type="text" x-model="pseudo" class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                    </div>
                    <p x-show="errors.pseudo" x-text="errors.pseudo" class="mt-2 text-sm text-red-600" x-cloak></p>
                </div>

                <div>
                    <label for="team" class="block text-sm font-medium text-gray-700">
                        Équipe
                    </label>
                    <div class="mt-1">
                        <select id="team" name="team" x-model="team" class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                            <option value="">Sélectionnez une équipe</option>
                            {% for team in teams %}
                                <option value="{{ team }}">{{ team }}</option>
                            {% endfor %}
                        </select>
                    </div>
                    <p x-show="errors.team" x-text="errors.team" class="mt-2 text-sm text-red-600" x-cloak></p>
                </div>

                <div>
                    <button @click="submit" :disabled="isSubmitting" type="button" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                        <span x-show="isSubmitting">
                            <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Chargement...
                        </span>
                        <span x-show="!isSubmitting">
                            Commencer à voter
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}