{% extends 'base.html.twig' %}

{% block title %}Administration - {{ edition }}{% endblock %}

{% block header_title %}Administration{% endblock %}

{% block body %}
<div class="container mx-auto py-4" x-data="adminApp()">

    <div class="bg-white shadow-md rounded-lg p-6 mb-6">
        <h2 class="text-2xl font-bold mb-4">Réinitialisation des votes</h2>
        <p class="mb-4 text-gray-700">Cette action supprimera définitivement tous les votes enregistrés. Cette action est irréversible.</p>
        
        <button @click="confirmResetVotes" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" :disabled="processing">
            <span x-show="!processing">Réinitialiser tous les votes</span>
            <span x-show="processing">Traitement en cours...</span>
        </button>
        
        <div x-show="message" class="mt-4 p-3" :class="{'bg-green-100 text-green-700': success, 'bg-red-100 text-red-700': !success}">
            <p x-text="message"></p>
        </div>
    </div>
    
    <div class="bg-white shadow-md rounded-lg p-6">
        <h2 class="text-2xl font-bold mb-4">Liste des joueurs</h2>
        
        <div x-show="Object.keys(votes).length === 0" class="p-4 text-gray-700 bg-gray-100 rounded">
            Aucun joueur n'a encore voté.
        </div>
        
        <div x-show="Object.keys(votes).length > 0" class="overflow-x-auto">
            <table class="min-w-full bg-white border border-gray-200">
                <thead>
                    <tr>
                        <th class="py-2 px-4 border-b text-left">Pseudo</th>
                        <th class="py-2 px-4 border-b text-left">Équipe</th>
                        <th class="py-2 px-4 border-b text-left">Nombre de votes</th>
                        <th class="py-2 px-4 border-b text-left">QR Code</th>
                        <th class="py-2 px-4 border-b text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <template x-for="(userData, userId) in votes" :key="userId">
                        <tr class="hover:bg-gray-50">
                            <td class="py-2 px-4 border-b">
                                <input type="text" 
                                       :value="userData.pseudo" 
                                       class="w-full border rounded py-1 px-2" 
                                       @change="updatePlayer(userId, $event.target.value, userData.team)"
                                       :disabled="processing">
                            </td>
                            <td class="py-2 px-4 border-b">
                                <select class="w-full border rounded py-1 px-2" 
                                        :value="userData.team" 
                                        @change="updatePlayer(userId, userData.pseudo, $event.target.value)"
                                        :disabled="processing">
                                    <template x-for="team in teams" :key="team">
                                        <option :value="team" :selected="team === userData.team" x-text="team"></option>
                                    </template>
                                </select>
                            </td>
                            <td class="py-2 px-4 border-b" x-text="Object.keys(userData.scores || {}).length"></td>
                            <td class="py-2 px-4 border-b">
                                <a :href="generateQRCodeURL(userId)" 
                                   target="_blank" 
                                   class="bg-indigo-500 hover:bg-indigo-600 text-white px-3 py-1 rounded text-sm inline-flex items-center"
                                   title="Générer un QR code pour ce joueur">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" />
                                    </svg>
                                    QR Code
                                </a>
                            </td>
                            <td class="py-2 px-4 border-b">
                                <button @click="confirmDeletePlayer(userId, userData.pseudo)" 
                                        class="bg-red-500 hover:bg-red-600 text-white px-3 py-1 rounded text-sm"
                                        :disabled="processing">
                                    Supprimer
                                </button>
                            </td>
                        </tr>
                    </template>
                </tbody>
            </table>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function adminApp() {
            return {
                votes: {{ votes|json_encode|raw }},
                teams: {{ teams|json_encode|raw }},
                editingPlayer: null,
                processing: false,
                message: '',
                success: false,
                baseUrl: window.location.origin,
                
                confirmResetVotes() {
                    if (confirm('Êtes-vous sûr de vouloir réinitialiser tous les votes ? Cette action est irréversible.')) {
                        this.resetVotes();
                    }
                },
                
                resetVotes() {
                    this.processing = true;
                    this.message = '';
                    
                    fetch('/api/admin/reset-votes', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        this.success = data.success;
                        this.message = data.message;
                        
                        if (data.success) {
                            // Vider la liste des votes si réinitialisation réussie
                            this.votes = {};
                        }
                    })
                    .catch(error => {
                        this.success = false;
                        this.message = 'Erreur de connexion au serveur.';
                        console.error('Erreur:', error);
                    })
                    .finally(() => {
                        this.processing = false;
                    });
                },
                
                confirmDeletePlayer(userId, pseudo) {
                    if (confirm(`Êtes-vous sûr de vouloir supprimer le joueur "${pseudo}" ? Cette action est irréversible.`)) {
                        this.deletePlayer(userId, pseudo);
                    }
                },
                
                deletePlayer(userId, pseudo) {
                    this.processing = true;
                    this.message = '';
                    
                    fetch(`/api/admin/delete-player/${encodeURIComponent(userId)}`, {
                        method: 'DELETE',
                        headers: {
                            'Accept': 'application/json'
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        this.success = data.success;
                        this.message = data.message;
                        
                        if (data.success) {
                            // Supprimer le joueur de la liste locale
                            const updatedVotes = {...this.votes};
                            delete updatedVotes[userId];
                            this.votes = updatedVotes;
                        }
                    })
                    .catch(error => {
                        this.success = false;
                        this.message = 'Erreur de connexion au serveur.';
                        console.error('Erreur:', error);
                    })
                    .finally(() => {
                        this.processing = false;
                    });
                },
                
                updatePlayer(userId, newPseudo, team) {
                    // Éviter les updates inutiles si rien n'a changé
                    if (this.votes[userId].pseudo === newPseudo && this.votes[userId].team === team) {
                        return;
                    }
                    
                    this.processing = true;
                    this.message = '';
                    
                    fetch(`/api/admin/update-player/${encodeURIComponent(userId)}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Accept': 'application/json'
                        },
                        body: JSON.stringify({
                            newPseudo: newPseudo,
                            team: team
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        this.success = data.success;
                        this.message = data.message;
                        
                        if (data.success) {
                            // Mettre à jour le joueur dans la liste locale
                            const updatedVotes = {...this.votes};
                            
                            // Mettre à jour le pseudo et l'équipe
                            updatedVotes[userId].pseudo = newPseudo;
                            updatedVotes[userId].team = team;
                            
                            this.votes = updatedVotes;
                        }
                    })
                    .catch(error => {
                        this.success = false;
                        this.message = 'Erreur de connexion au serveur.';
                        console.error('Erreur:', error);
                    })
                    .finally(() => {
                        this.processing = false;
                    });
                },
                
                generateQRCodeURL(userId) {
                    // Construire l'URL de reconnexion complète
                    const reconnectionUrl = `${this.baseUrl}/reconnexion/${encodeURIComponent(userId)}`;
                    
                    // Encoder cette URL pour l'utiliser dans le lien vers yaqrgen.com
                    return `https://yaqrgen.com/qrcode.png?data=${encodeURIComponent(reconnectionUrl)}`;
                }
            };
        }
    </script>
{% endblock %}
